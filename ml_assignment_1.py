# -*- coding: utf-8 -*-
"""ML assignment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qIgw8Xxlt7sbk4hexUvclS-P874XRd_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import zscore, skew, kurtosis

# Load the dataset
df = pd.read_csv("/content/house_price.csv")

"""# **QUESTION 1**"""

print("Basic Info:")
print(df.info())
print("\nFirst 5 rows:")
print(df.head())

print("\nSummary Statistics:")
print(df.describe())

# Checking for missing values
print("\nMissing Values:")
print(df.isnull().sum())

"""# **QUESTION 2a**"""

col = 'price_per_sqft'
if col not in df.columns:
    raise ValueError("The dataset does not contain 'price_per_sqft'. Check column names.")
print("\nQ2: Outlier Detection and Removal")

mean_val = df[col].mean()
std_dev = df[col].std()
z_scores = np.abs((df[col] - mean_val) / std_dev)
outlier_threshold = 3
trimmed_df_mean_std = df[z_scores < outlier_threshold].copy()
print(f"Mean: {mean_val}, Standard Deviation: {std_dev}")
print(f"Outliers detected using Mean & Std: {sum(z_scores > outlier_threshold)}")

"""# **QUESTION 2b**"""

lower_bound = df[col].quantile(0.01)
upper_bound = df[col].quantile(0.99)
df_percentile = df.copy()
df_percentile[col] = np.clip(df[col], lower_bound, upper_bound)
print(f"1st Percentile: {lower_bound}, 99th Percentile: {upper_bound}")

"""# **QUESTION 2c**"""

Q1 = df[col].quantile(0.25)
Q3 = df[col].quantile(0.75)
IQR = Q3 - Q1
lower_bound_iqr = Q1 - 1.5 * IQR
upper_bound_iqr = Q3 + 1.5 * IQR
trimmed_df_iqr = df[(df[col] >= lower_bound_iqr) & (df[col] <= upper_bound_iqr)].copy()

print(f"Q1: {Q1}, Q3: {Q3}, IQR: {IQR}")
print(f"Lower Bound: {lower_bound_iqr}, Upper Bound: {upper_bound_iqr}")

"""# **QUESTION 2d**"""

z_scores_all = np.abs(zscore(df[col]))
df_zscore = df.copy()
df_zscore[col] = np.where(z_scores_all > 3, df[col].median(), df[col])
z_threshold = 2.5
print(f"Z-Score Method detected {sum(z_scores_all > z_threshold)} outliers.")

print(f"Original count: {df[col].count()}")
print(f"Mean-Std Trim count: {trimmed_df_mean_std[col].count()}")
print(f"Percentile Cap count: {df_percentile[col].count()}")
print(f"IQR Trim count: {trimmed_df_iqr[col].count()}")
print(f"Z-Score Impute count: {df_zscore[col].count()}")

#  Before & After Outlier Removal
print("\nBefore Outlier Removal:")
print(df.describe())
print("\nAfter Removing Outliers (Mean & Std):")
print(trimmed_df_mean_std.describe())
print("\nAfter Capping Outliers (Percentile Method):")
print(df_percentile.describe())
print("\nAfter Removing Outliers (IQR Method):")
print(trimmed_df_iqr.describe())
print("\nAfter Imputing Outliers (Z-Score Method using Median):")
print(df_zscore.describe())

"""*   IQR Trimming (Removed data beyond 1.5 * IQR).

* Mean-Std Trimming (Removed data beyond 3 std deviations).

*  Percentile Capping (Capped at 1st and 99th percentile).

*   Z-Score Imputation (Replaced extreme values with the median).



"""

print(f"Original dataset size: {df.shape[0]}")
print(f"Mean-Std Trimmed size: {trimmed_df_mean_std.shape[0]}")
print(f"Percentile Capped size: {df_percentile.shape[0]}")
print(f"IQR Trimmed size: {trimmed_df_iqr.shape[0]}")
print(f"Z-Score Imputed size: {df_zscore.shape[0]}")

"""# **QUESTION 3**"""

df_combined = pd.DataFrame({
    "Original": np.log1p(df[col]),
    "Mean-Std (Trim)": np.log1p(trimmed_df_mean_std[col]),
    "Percentile (Cap)": np.log1p(df_percentile[col]),
    "IQR (Trim)": np.log1p(trimmed_df_iqr[col]),
    "Z-Score (Impute)": np.log1p(df_zscore[col])
})


df_melted = df_combined.melt(var_name="Method", value_name="Log Price Per Sqft")

labels = ["Original", "Mean-Std (Trim)", "Percentile (Cap)", "IQR (Trim)", "Z-Score (Impute)"]


plt.figure(figsize=(12, 6))
sns.set_theme(style="whitegrid")


sns.boxplot(
    x="Method",
    y="Log Price Per Sqft",
    hue="Method",
    data=df_melted,
    palette="Set2",
    linewidth=1.2,
    width=0.5,
    legend=False
)


plt.title("Comparison of Outlier Removal Methods (Log Transformed)", fontsize=14, fontweight='bold')
plt.xlabel("Outlier Removal Method", fontsize=12)
plt.ylabel("Log Price Per Sqft", fontsize=12)


plt.xticks(rotation=0, fontsize=11)
plt.grid(axis="y", linestyle="--", alpha=0.7)

plt.show()

summary_data = {}
data_list = [
    np.log1p(df[col].dropna()),
    np.log1p(trimmed_df_mean_std[col].dropna()),
    np.log1p(df_percentile[col].dropna()),
    np.log1p(trimmed_df_iqr[col].dropna()),
    np.log1p(df_zscore[col].dropna())
]

for method, data in zip(labels, data_list):
    q1, q3 = np.percentile(data.dropna(), 25), np.percentile(data.dropna(), 75)
    iqr = q3 - q1
    outliers = sum((data < q1 - 1.5 * iqr) | (data > q3 + 1.5 * iqr))
    summary_data[method] = {"Q1": q1, "Q3": q3, "IQR": iqr, "Outliers Detected": outliers}

summary_data

"""# **IQR is the Best**
Removes the most extreme values while maintaining the overall distribution.
The whiskers are shorter, indicating that the dataset is now less skewed.

# **QUESTION 4**
"""

plt.figure(figsize=(10, 5))
sns.histplot(df[col], bins=100, kde=True)
plt.xlim([df[col].quantile(0.01), df[col].quantile(0.99)])
plt.title("Histogram of Price Per Sqft (Capped)")
plt.show()

plt.figure(figsize=(10, 5))
sns.histplot(np.log1p(df[col]), bins=50, kde=True)
plt.title("Histogram After Log Transformation")
plt.show()

original_skew = skew(df[col])
original_kurtosis = kurtosis(df[col])
transformed_skew = skew(np.log1p(df[col]))
transformed_kurtosis = kurtosis(np.log1p(df[col]))

print(f"\nSkewness Before Transformation: {original_skew}")
print(f"Kurtosis Before Transformation: {original_kurtosis}")
print(f"Skewness After Transformation: {transformed_skew}")
print(f"Kurtosis After Transformation: {transformed_kurtosis}")

"""# **QUESTION 5**"""

numeric_df = df.select_dtypes(include=['number'])
plt.figure(figsize=(10, 6))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Heatmap")
plt.show()

"""# **QUESTION 6**"""

for col in numeric_df.columns:
    if col != 'price_per_sqft':
        plt.figure(figsize=(6, 4))
        sns.scatterplot(x=df[col], y=df['price_per_sqft'])
        plt.xlabel(col)
        plt.ylabel('Price per Sqft')
        plt.title(f'Scatter Plot: {col} vs Price per Sqft')
        plt.show()